name: Run CI

on:
  workflow_dispatch:
    inputs:
      pre:
        type: boolean
  push:
    branches:
      - "master"
  pull_request:

env:
  RELEASE: ${{ github.event_name == 'workflow_dispatch' }}

jobs:
  lint-python:
    name: Lint Python
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - name: Run Black
        uses: psf/black@stable
      - name: Run ISort
        uses: isort/isort-action@v1

  lint-rust:
    name: Lint Rust
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@nightly
        with:
            components: rustfmt, clippy

      - name: Run cargo fmt
        run: cargo fmt --all -- --check

      - name: Run cargo clippy
        run: cargo clippy -- -D warnings

  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: pdm-project/setup-pdm@v3
        name: Setup PDM
      - name: Install Dependencies
        run: pdm install --no-self
      - name: Sphinx Build
        run: pdm run build-docs
      - name: Upload Documentation to Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: sphinx-docs
          path: build
      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v2.0
        with:
          publish-dir: './build'
          production-branch: master
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions"
          enable-pull-request-comment: false
          enable-commit-comment: true
          overwrites-pull-request-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}


  build-matrix:
    name: Create Build Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.configure.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
      - name: Install Actions Toolkit
        run: pip install actions_toolkit
      - name: Configure Build Matrix
        id: configure
        run: python ./.github/scripts/gen_matrix.py

  build:
    name: Build
    needs: [build-matrix]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON( needs.build-matrix.outputs.matrix ) }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.8
          architecture: ${{ matrix.py_arch || 'x64' }}

      - name: Install Dependencies
        run: |
          pip install tomlkit
          pip install actions_toolkit

      - name: Bump Dev Version
        if: ${{ env.RELEASE != 'true' }}
        run: python ./.github/scripts/bump_cargo_version.py

      - name: Build Wheel
        id: build-wheel
        continue-on-error: true
        uses: PyO3/maturin-action@v1
        with:
          rust-toolchain: nightly
          command: ${{ matrix.build_cmd }}
          target: ${{ matrix.target }}
          manylinux: ${{ matrix.manylinux }}
          args: ${{ matrix.build_args }}
          sccache: true

      - name: Upload wheels - Packed
        if: ${{ steps.build-wheel.outcome == 'success' }}
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

      - name: Upload wheels - Unpacked
        if: ${{ steps.build-wheel.outcome == 'success' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.name }}
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' }}
    needs: [lint-python, lint-rust, build, build-docs]
    steps:
      - uses: actions/checkout@v3
      - uses: pdm-project/setup-pdm@v3
        name: Setup PDM
      - name: Install Dependencies
        run: pdm install --no-self
      - name: Extract Version
        id: extract-version
        run: python ./.github/scripts/extract_version.py
      - name: Download Built Wheels
        uses: actions/download-artifact@v3
        with:
          name: wheels
          path: dist
      - name: Download Sphinx Documentation # TODO: rezip and include in release
        uses: actions/download-artifact@v3
        with:
          name: sphinx-docs
          path: build

      - name: Towncrier Extract Release Notes
        run: towncrier build --version ${{ env.VERSION }} --keep --config ./towncrier_release.toml

      - name: Towncrier Build Release Changelog
        if: ${{ !inputs.pre }}
        run: towncrier build --version ${{ env.VERSION }} --yes

      - name: Release to GitHub
        run: |
          git add .
          git diff-index --quiet HEAD || git commit -m "chore(release): ${{ env.VERSION }}"
          git push
          gh release create "${{ env.VERSION }}" dist/* --notes-file ./release-notes.md --title "${{ env.VERSION }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_TOKEN }}
